R2Y.cum <- 0
for(i in 1:model$ncomp){
R2Y.cum[i] <- (1-sum(model$residuals[,,i]^2)/model.TSS)*100
if(i == 1){
R2Y[i] <- R2Y.cum[i]
}
else{
R2Y[i] <- R2Y.cum[i]-R2Y.cum[i-1]
}
}
## Calculate Q2Y values for PLSR model:
Q2Y <- 0
Q2Y.cum <- 0
for(i in 1:model$ncomp){
Q2Y.cum[i] <- (1-sum(PRESS[,i])/model.TSS)*100
if(i == 1){
Q2Y[i] <- Q2Y.cum[i]
}
else{
Q2Y[i] <- Q2Y.cum[i]-Q2Y.cum[i-1]
}
}
### Define output list:
output <- list(R2X=R2X, R2X.cum=R2X.cum, R2Y=R2Y, R2Y.cum=R2Y.cum, Q2Y=Q2Y, Q2Y.cum=Q2Y.cum)
return(output)
}
dat1 <- read_excel("../09-24-21 WSH_20210924_143631.xlsx", range = "A42:K128")
dat1 <- dat1 %>% mutate(pretreat = case_when(
grepl("Unt", Sample) ~ "No pretreat",
grepl("TGFb", Sample) ~ "TGFb",
grepl("TNFa", Sample) ~ "TNFa",
grepl("Hypoxia", Sample) ~ "Hypoxia"
)
) %>%
mutate(drug = case_when(
grepl("DMSO", Sample) ~ "DMSO",
grepl("TMZ", Sample) ~ "TMZ",
grepl("carbo", Sample) ~ "Carbo"
)) %>%
mutate(time = case_when(
grepl("3h", Sample) ~ "3h",
grepl("24h", Sample) ~"24h"
))
colnames(dat1) <- gsub("-|/", ".", colnames(dat1))
dat2 <- read_excel("../06-23-21 G816 cell death FC results.xlsx", range = "A1:D22")
# BiocManager::install(c("limma","GSVA","GSVAdata","org.Hs.eg.db","GSEABase","snow","rlecuyer","edgeR", "gage", "GO.db")) # Comment out this line if you've already installed these packages to your current R distribution.
### Load packages:
library(tidyverse)
library(reshape2)
library(ggthemes)
library(ggpubr)
library(pls)
library(cowplot)
library(plotly)
library(RColorBrewer)
library(colorspace)
library(jcolors)
library(ggsci)
library(cowplot)
library(Hmisc)
library(stats)
library(NMF)
library(ggfortify)
library(ggrepel)
library(GSVA) # Gene set variation analysis package from Bioconductor --> This package contains a command that can perform four types of gene set enrichment analyses: GSVA, ssGSEA, PLAGE, and z-score.
library(org.Hs.eg.db)
library(GSVAdata)
library(GSEABase)
library(limma)
library(msigdbr)
library(gage)
library(plyr)
library(GO.db)
library(heatmaply)
library(plsVarSel)
### Clear R workspace:
rm(list=ls())
### Check current working directory:
cwd <- getwd()
cwd
### Set working directory:
setwd(cwd) # Set current working directory to location of this notebook for easier handling and saving of data associated with the notebook
## Load RPPA data for TCGA GBM samples
tcga.rppa.path <- "RPPA_RBN.txt"
tcga.rppa <- read_tsv(tcga.rppa.path)
tcga.rppa <- column_to_rownames(tcga.rppa, var="Sample_description")
tcga.rppa <- t(tcga.rppa)
#rppa <- rownames_to_column(as.data.frame(rppa), var="sample")
tcga.rna.path <- "HiSeqV2.txt"
tcga.rna.data <- read_tsv(tcga.rna.path)
tcga.rna.data <- column_to_rownames(tcga.rna.data, var="sample")
tcga.rna.data <- t(tcga.rna.data)
subtype.info <- "gbm_tcga_pub2013_clinical_data.tsv"
subtype <- read_tsv(subtype.info)
subtype <- dplyr::rename(subtype, `sample`=`Sample ID`)
tcga.sub <- filter(subtype, `Gene Expression Subtype`=="Mesenchymal"|`Gene Expression Subtype`=="Proneural")
tcga.rna.sub <- tcga.rna.data %>% as.data.frame()
tcga.rna.sub <- rownames_to_column(tcga.rna.sub, var="sample")
tcga.rna.sub <- semi_join(tcga.rna.sub, tcga.sub, by="sample")
tcga.sub <- semi_join(tcga.sub, tcga.rna.sub, by="sample") %>% column_to_rownames(var="sample")
tcga.rna.sub <- tcga.rna.sub %>% column_to_rownames(var="sample")
##### Load cell line info:
## Path for cell line info:
fn.cells <- "CCLE_sample_info.csv"
### Load info for cell lines:
cl.sum <- read.csv(fn.cells)   #Cell line summaries
## Desired cell line lineages:
glio.lin <- "central_nervous_system"
cell.info <- which(cl.sum$lineage %in% glio.lin) %>% cl.sum[.,] # Info of cell lines of interest
a <- split(cell.info, with(cell.info, lineage), drop = TRUE)
## Pull out each specific cancer:
glio <- a$central_nervous_system %>% split(., with(.,lineage_sub_subtype)) %>% .$glioblastoma
rm(a)
##### Load CCLE RNA-seq data: log2(TPM+1) values
## File path for CCLE RNA-seq data:
fn4 = "CCLE_RNAseq_gene_expression_TPM_log2.csv"
### Load CCLE RNA-seq data:
ccle.rna <- read_csv(fn4, col_names=T)
ccle.genes <- colnames(ccle.rna)[-1] %>%
gsub("\\ .*","",.) # Remove extraneous suffixes on gene names
colnames(ccle.rna) <- c("Cell.line", ccle.genes)
## Get desired cell line data:
ccle.id.rna <- ccle.rna$Cell.line %>% as.character() # Get DepMap IDs from CCLE data
#### GLIOMA ####
## Pull out glioma cell line IDs, names, and data:
glio.ind.ccle.rna <- which(ccle.id.rna %in% glio$DepMap_ID) # Match glioma cell line DepMap IDs to DepMap IDs in data set
glio.id.ccle.rna <- ccle.id.rna[glio.ind.ccle.rna] # DepMap IDs in data set
glio.name.ccle.rna <- match(glio.id.ccle.rna, glio$DepMap_ID) %>%
glio$stripped_cell_line_name[.] # Names
# Pull out the glioma data:
glio.ccle.rna <- ccle.rna[glio.ind.ccle.rna,] # mRNA expression
glio.ccle.rna$Cell.line <- glio.name.ccle.rna # Replace DepMap IDs with stripped cell line names
##### Load CCLE RPPA data:
## File path for CCLE RPPA data:
fn5 = "CCLE_RPPA_20181003.csv" # Note, as written, this file has been stored one folder up from the current directory in which this notebook file resides -- remove the ../ if the data are in the same directory as this notebook
## Load CCLE RPPA data:
ccle.rppa <- read_csv(fn5, col_names=T)
ccle.ans <- colnames(ccle.rppa)[-1] %>%
gsub("\\_Caution.*","",.) # Remove extraneous "_Caution" suffixes on analyte names
colnames(ccle.rppa) <- c("Cell.line", ccle.ans)
## Get cell line names in RPPA data:
ccle.names.rppa <- ccle.rppa$Cell.line %>% as.character() # Get CCLE names from CCLE RPPA data
## Pull out the glio IDs, names, and data:
glio.ind.ccle.rppa <- which(ccle.names.rppa %in% glio$CCLE_Name) # Match glio cell line DepMap IDs to DepMap IDs in data set
glio.names.ccle.rppa <- ccle.names.rppa[glio.ind.ccle.rppa] %>%
gsub("\\_.*","",.) # Cleaned (stripped) CCLE cell line names
## Pull out the glio data:
glio.ccle.rppa <- ccle.rppa[glio.ind.ccle.rppa,] # Data
glio.ccle.rppa$Cell.line <- glio.names.ccle.rppa # Replace DepMap IDs with stripped cell line names
library(pls)
### R2, Q2, and VIP helper function for extracting PLSR model performance metrics:
rq_func <- function(model){
### Get X and Y matrices:
xmat <- model$model$X
ymat <- model$model$Y
### Performance metrics:
R2X <- explvar(model)
names(R2X) <- seq(1:length(R2X)) %>% paste("PC",.,sep="")
R2X.cum <- cumsum(R2X)
PRESS <- model$validation$PRESS
## Calculate R2Y values for PLSR model:
model.TSS <- sum((ymat-mean(ymat))^2)
R2Y <- 0
R2Y.cum <- 0
for(i in 1:model$ncomp){
R2Y.cum[i] <- (1-sum(model$residuals[,,i]^2)/model.TSS)*100
if(i == 1){
R2Y[i] <- R2Y.cum[i]
}
else{
R2Y[i] <- R2Y.cum[i]-R2Y.cum[i-1]
}
}
## Calculate Q2Y values for PLSR model:
Q2Y <- 0
Q2Y.cum <- 0
for(i in 1:model$ncomp){
Q2Y.cum[i] <- (1-sum(PRESS[,i])/model.TSS)*100
if(i == 1){
Q2Y[i] <- Q2Y.cum[i]
}
else{
Q2Y[i] <- Q2Y.cum[i]-Q2Y.cum[i-1]
}
}
### Define output list:
output <- list(R2X=R2X, R2X.cum=R2X.cum, R2Y=R2Y, R2Y.cum=R2Y.cum, Q2Y=Q2Y, Q2Y.cum=Q2Y.cum)
return(output)
}
rppa.prot <- tcga.rppa
rppa.prot <- rppa.prot %>% scale(center=T, scale=T) %>% as.data.frame() #mean-center and variance scaling the data
#pull out proteins to be used as phenotypic markers
proteins.y <- c( "FIBRONECTIN", "PAI1", "COLLAGENVI")
y.mat <- data.matrix(dplyr::select(rppa.prot, proteins.y))
x.mat <- data.matrix(dplyr::select(rppa.prot, -proteins.y))
#run PLSR
mydata <- data.frame(Y=I(y.mat),X=I(x.mat))
pls1 <- plsr(Y~X, scale=F, data=mydata, validation = "LOO", method="kernelpls")
#summary(pls1)
#filtering points based on VIP scores
score.min <- 1
vip.scores <- VIP(pls1, 3) %>% data.frame()
colnames(vip.scores)[1] <- "VIP.score"
vip.scores <- rownames_to_column(vip.scores, var="protein")
vip.scores <- vip.scores %>% filter(VIP.score>score.min)
proteins.VIP <- vip.scores$protein
#running PLSR again using only proteins w/ high VIP scores
x.mat <- data.matrix(dplyr::select(rppa.prot, proteins.VIP))
mydata <- data.frame(Y=I(y.mat),X=I(x.mat))
pls1 <- plsr(Y~X, scale=F, data=mydata, validation = "LOO", method="kernelpls")
plot(pls1, plottype = "scores")
sc <- scores(pls1)
ld <- loadings(pls1)
Ysc <-Yscores(pls1)
Yld <- Yloadings(pls1)
vip.scores <- vip.scores %>% cbind(ld[,1])
colnames(vip.scores)[ncol(vip.scores)] <- "PC1"
ld <- cbind(ld, vip.scores$VIP.score)
#plotting proteins with VIP scores over threshold
ggplot(data=arrange(vip.scores, desc(VIP.score)),
aes(x=reorder(protein, -VIP.score), y=VIP.score, fill=PC1))+
geom_bar(stat="identity")+
theme_cowplot()+
theme(axis.text.x=element_text(angle=90, vjust=.5, hjust=1),
panel.background = element_rect(color = "#000000")
)+
scale_fill_gradient2( # Custom color gradient for bars
midpoint=0,
low="red",
mid="#555555",
high="blue",
aesthetics="fill"
) +
labs(title = paste0("VIP Scores > ", score.min),
x = element_blank(),
y = "VIP score")
#ggsave("TCGA_RPPA_VIP.png", width=8, height=6)
#loadings plot
ggplot()+
geom_hline(yintercept = 0, color = "#333333", linetype = "dashed", alpha = 0.7) +
geom_vline(xintercept = 0, color = "#333333", linetype = "dashed", alpha = 0.7) +
geom_point(aes(x=ld[,1], y=ld[,2], size = (ld[,ncol(ld)]-min(ld[,ncol(ld)]))/max(ld[,ncol(ld)])), alpha=0.5)+
geom_point(aes(x=Yld[,1], y=Yld[,2]), color="blue")+
labs(title="GBM TCGA RPPA PLSR",
x="PC1",
y="PC2")+
#       x=paste0("PC1", " (",explvar(pls1)[1]%>%round(1), "%)"),
#       y=paste0("PC2", " (",explvar(pls1)[2]%>%round(1), "%)"))+
geom_text_repel(aes(x=ld[,1], y=ld[,2]),
label=rownames(ld),
color="#222222",
size=3)+
geom_text_repel(aes(x=Yld[,1], y=Yld[,2]),
label=rownames(Yld), size=3, color="blue")+
theme_cowplot() +
scale_size(
limits=c(0,1),
)+
theme(
panel.background = element_rect(color = "#000000"),
legend.position = "none"
) +
scale_x_continuous(expand=expansion(mult=.1))
#ggsave("TCGA_RPPA_PLSR.png", width=6, height=4)
#ggsave("TCGA_RPPA_PLSR.svg", width=4, height=4)
pls1res <- rq_func(pls1)
R2X <- pls1res$R2X; R2X_cum <- pls1res$R2X.cum
R2Y <- pls1res$R2Y; R2Y_cum <- pls1res$R2Y.cum
Q2Y_cum <- pls1res$Q2Y.cum
rq2_cum <- cbind(R2X_cum,R2Y_cum,Q2Y_cum); colnames(rq2_cum) <- c("R2X","R2Y","Q2Y")
comp <- which.max(Q2Y_cum) # number of components for best predictive power (based on Q2Y)
R2X_cum[comp]
R2Y_cum[comp]
Q2Y_cum[comp]
plot(pls1, ncomp=comp, asp=1, line=T, xlab="Actual", ylab="Predicted", main="Parity plots")
plot(pls1res$R2X.cum, ylab="R2X", xlab="# PCs")
plot(pls1res$R2Y.cum, ylab="R2Y", xlab="# PCs")
plot(pls1res$Q2Y.cum, ylab="Q2Y", xlab="# PCs")
matplot(rq2_cum, pch=c("X","Y","Q"), cex=1, col=c("red","blue","green"), ylab="% var. expl.", xlab="# PCs")
rq2_cum %>% data.frame(ncomp=seq(1,nrow(.))) %>% pivot_longer(-ncomp) %>% mutate(name=factor(name,levels=colnames(rq2_cum))) %>%
ggplot(aes(ncomp, value, fill=name, color=name, shape=name)) +
geom_vline(xintercept = comp, linetype="dashed") + geom_point(size=3) + #geom_line(size=1) +
theme_cowplot(18) + scale_x_continuous(n.breaks=10) +
labs(x="# PCs", y="% var. expl.", color="Metric", shape="Metric", fill="Metric")+
theme(panel.background = element_rect(color = "#000000"))+
scale_x_continuous(limits=c(0,20))+
scale_y_continuous(limits = c(0,100))
#ggsave("TCGA_PLSR_var-expl.png", width = 5, height = 4)
#get and format CCLE RPPA data
rppa.prot <- glio.ccle.rppa
rppa.prot <- rppa.prot %>% column_to_rownames(var="Cell.line")
rppa.prot <- rppa.prot %>% scale(center=T, scale=T) %>% as.data.frame()
rppa.prot <- rppa.prot %>% .[, colSums(is.na(.))==0]
#pull out proteins to be used as phenotypic markers
proteins.y <- c( "Fibronectin", "PAI-1", "Collagen_VI")
Y <- data.matrix(dplyr::select(rppa.prot, proteins.y))
X <- dplyr::select(rppa.prot, -proteins.y) %>% as.matrix()
#run PLSR
mydata <- data.frame(yy=I(Y),xx=I(X))
PLSR_matrix <- plsr(yy~xx, scale=F, data=mydata, method="kernelpls")
#summary(PLSR_matrix)
#filtering points based on VIP scores
score.min <- 1.2
vip.scores <- VIP(PLSR_matrix, 5) %>% data.frame()
colnames(vip.scores)[1] <- "VIP.score"
vip.scores <- rownames_to_column(vip.scores, var="protein")
vip.scores <- vip.scores %>% filter(VIP.score>score.min)
proteins.VIP <- vip.scores$protein
#running PLSR again using only proteins w/ high VIP scores
X <- data.matrix(dplyr::select(rppa.prot, proteins.VIP))
mydata <- data.frame(yy=I(Y),xx=I(X))
PLSR_matrix <- plsr(yy~xx, scale=F, data=mydata, method="kernelpls")
#plot(PLSR_matrix, plottype = "scores")
sc <- scores(PLSR_matrix)
ld <- loadings(PLSR_matrix)
Ysc <-Yscores(PLSR_matrix)
Yld <- Yloadings(PLSR_matrix)
ld <- cbind(ld, vip.scores$VIP.score)
vip.scores <- vip.scores %>% cbind(ld[,1])
colnames(vip.scores)[ncol(vip.scores)] <- "PC1"
#plotting proteins by VIP score
ggplot(data=arrange(vip.scores, desc(VIP.score)), aes(x=reorder(protein, -VIP.score), y=VIP.score, fill=PC1))+
geom_bar(stat="identity")+
theme_cowplot()+
theme(axis.text.x=element_text(angle=90, vjust=.5, hjust=1),
panel.background = element_rect(color = "#000000")
)+
scale_fill_gradient2( # Custom color gradient for bars
midpoint=0,
low="red",
mid="#555555",
high="blue",
aesthetics="fill"
) +
labs(title = paste0("VIP scores > ", score.min),
x = element_blank(),
y = "VIP score")
#ggsave("CCLE_RPPA_VIP.png", width=8, height=6)
#loadings plot
ggplot()+
geom_hline(yintercept = 0, color = "#333333", linetype = "dashed", alpha = 0.7) +
geom_vline(xintercept = 0, color = "#333333", linetype = "dashed", alpha = 0.7) +
geom_point(aes(x=ld[,1], y=ld[,2], size = (ld[,ncol(ld)]-min(ld[,ncol(ld)]))/max(ld[,ncol(ld)])), alpha=0.5)+
geom_point(aes(x=Yld[,1], y=Yld[,2]), color="blue")+
labs(title="GBM CCLE RPPA PLSR",
x=paste0("PC1", " (",explvar(PLSR_matrix)[1]%>%round(1), "%)"),
y=paste0("PC2", " (",explvar(PLSR_matrix)[2]%>%round(1), "%)"))+
geom_text_repel(aes(x=ld[,1], y=ld[,2]),
label=rownames(ld),
color="#222222",
size=3)+
geom_text_repel(aes(x=Yld[,1], y=Yld[,2]),
label=rownames(Yld),
size=3,
color="blue")+
theme_cowplot() +
scale_size(
limits=c(0,1),
)+
theme(
panel.background = element_rect(color = "#000000"),
legend.position = "none"
) +
scale_x_continuous(expand=expansion(mult=.1))
#ggsave("CCLE_RPPA_PLSR.png", width=6, height=4)
pls1res <- rq_func(pls1)
R2X <- pls1res$R2X; R2X_cum <- pls1res$R2X.cum
R2Y <- pls1res$R2Y; R2Y_cum <- pls1res$R2Y.cum
Q2Y_cum <- pls1res$Q2Y.cum
rq2_cum <- cbind(R2X_cum,R2Y_cum,Q2Y_cum); colnames(rq2_cum) <- c("R2X","R2Y","Q2Y")
comp <- which.max(Q2Y_cum) # number of components for best predictive power (based on Q2Y)
R2X_cum[comp]
R2Y_cum[comp]
Q2Y_cum[comp]
plot(pls1, ncomp=comp, asp=1, line=T, xlab="Actual", ylab="Predicted", main="Parity plots")
plot(pls1res$R2X.cum, ylab="R2X", xlab="# PCs")
plot(pls1res$R2Y.cum, ylab="R2Y", xlab="# PCs")
plot(pls1res$Q2Y.cum, ylab="Q2Y", xlab="# PCs")
matplot(rq2_cum, pch=c("X","Y","Q"), cex=1, col=c("red","blue","green"), ylab="% var. expl.", xlab="# PCs")
rq2_cum %>% data.frame(ncomp=seq(1,nrow(.))) %>% pivot_longer(-ncomp) %>% mutate(name=factor(name,levels=colnames(rq2_cum))) %>%
ggplot(aes(ncomp, value, fill=name, color=name, shape=name)) +
geom_vline(xintercept = comp, linetype="dashed") + geom_point(size=3) + #geom_line(size=1) +
theme_cowplot(18) + scale_x_continuous(n.breaks=10) +
labs(x="# PCs", y="% var. expl.", color="Metric", shape="Metric", fill="Metric")
#assigning genes to either proneural (+1) or mesenchymal (-1) - this just makes things work later on
genes.y <- rbind(
c("FN1", 1),
c("DLL3", -1),
c("SOX2", -1),
c("ERBB3", -1),
c("OLIG2", -1),
c("CHI3L1", 1),
c("TRADD", 1),
c("TLR2", 1),
c("RELB", 1)
#  c("FGFR3", 0),
#  c("PDGFA", 0),
#  c("EGFR", 0),
#  c("AKT2", 0),
#  c("NES", 0)
)
colnames(genes.y) <- c("gene", "survival")
genes.y.surv <- genes.y[,2] %>% as.numeric()
#run PLSR
tcga.rna <- as.data.frame(tcga.rna.data)
tcga.rna <- tcga.rna %>% scale(center=T, scale=T) %>% data.frame()
#tcga.rna <- tcga.rna %>% select_if(~ !any(is.na(.)))
tcga.rna <- tcga.rna %>% .[, colSums(is.na(.))==0]
tcga.rna.samples <- rownames(tcga.rna)
Y <- data.matrix(dplyr::select(tcga.rna, genes.y[,1]))
X <- dplyr::select(tcga.rna, -genes.y[,1]) %>% data.matrix()
mydata <- data.frame(yy=I(Y),xx=I(X))
PLSR_matrix <- plsr(yy~xx, scale=F, data=mydata, method="kernelpls")
#summary(PLSR_matrix)
#filtering points based on VIP scores
score.min <- 1.8
vip.scores <- VIP(PLSR_matrix, 5) %>% data.frame()
colnames(vip.scores)[1] <- "VIP.score"
vip.scores <- rownames_to_column(vip.scores, var="protein")
vip.scores <- vip.scores %>% filter(VIP.score>score.min)
proteins.VIP <- vip.scores$protein
#running PLSR again using only proteins w/ high VIP scores
X <- data.matrix(dplyr::select(tcga.rna, proteins.VIP))
mydata <- data.frame(yy=I(Y),xx=I(X))
PLSR_matrix <- plsr(yy~xx, scale=F, data=mydata, method="kernelpls")
plot(PLSR_matrix, plottype = "scores")
sc <- scores(PLSR_matrix)
ld <- loadings(PLSR_matrix)
Ysc <-Yscores(PLSR_matrix)
Yld <- Yloadings(PLSR_matrix)
Yld <- cbind(Yld, genes.y.surv)
ld <- cbind(ld, vip.scores$VIP.score)
colnames(ld)[ncol(ld)] <- "VIP.score"
vip.scores <- vip.scores %>% cbind(ld[,1])
colnames(vip.scores)[ncol(vip.scores)] <- "PC1"
ggplot(data=arrange(vip.scores, desc(VIP.score)),
aes(x=reorder(protein, -VIP.score), y=VIP.score, fill=PC1))+
geom_bar(stat="identity")+
theme_cowplot()+
theme(axis.text.x=element_text(angle=90, vjust=.5, hjust=1),
panel.background = element_rect(color = "#000000")
)+
scale_fill_gradient2( # Custom color gradient for bars
midpoint=0,
low="red",
mid="#555555",
high="blue",
aesthetics="fill"
) +
labs(title = paste0("VIP Scores > ", score.min),
x = element_blank(),
y = "VIP score")
#ggsave("TCGA_RNA_VIP.png", width=10, height=6)
#loadings plot
ggplot()+
geom_hline(yintercept = 0, color = "#333333", linetype = "dashed", alpha = 0.7) +
geom_vline(xintercept = 0, color = "#333333", linetype = "dashed", alpha = 0.7) +
geom_point(aes(x=ld[,1], y=ld[,2], size=((ld[,ncol(ld)]-min(ld[,ncol(ld)]))/max(ld[,ncol(ld)]))), alpha=0.5)+
geom_point(aes(x=Yld[,1], y=Yld[,2], color=genes.y.surv))+
labs(title="GBM TCGA RNA-seq PLSR",
x=paste0("PC1", " (",explvar(PLSR_matrix)[1]%>%round(1), "%)"),
y=paste0("PC2", " (",explvar(PLSR_matrix)[2]%>%round(1), "%)"))+
geom_text_repel(aes(x=ld[,1], y=ld[,2]),
label=rownames(ld),
size=3)+
geom_text_repel(aes(x=Yld[,1], y=Yld[,2], color=genes.y.surv),
label=rownames(Yld),
size=3)+
scale_color_gradient2( # Custom color gradient for bars
limits = c(-1,1),
midpoint=0,
high="#0033ff",
mid="#8f00ff",
low="#ff3300"
) +
scale_size(
limits=c(0,1),
)+
theme_cowplot() +
theme(
panel.background = element_rect(color = "#000000"),
legend.position = "none"
) +
scale_x_continuous(expand=expansion(mult=.05))
#ggsave("TCGA_RNA_PLSR.png", width=6, height=4)
tcga.rna.ld <- ld
library(readxl)
verhaak_genes <- read_csv("verhaak_subtypes.csv")
verhaak_m <- verhaak_genes %>% dplyr::filter(subtype == "M") %>% pull(var = "gene")
verhaak_p <- verhaak_genes %>% dplyr::filter(subtype == "P") %>% pull(var = "gene")
verhaak_all <- verhaak_genes %>% pull(var = "gene")
phillips_mes <- read_excel("mmc4.xls", sheet = "MES") %>% pull(`Gene Symbol`)
phillips_pn <- read_excel("mmc4.xls", sheet = "PN") %>% pull(`Gene Symbol`)
mes_genes <- c(verhaak_m, phillips_mes)
pn_genes <- c(verhaak_p, phillips_pn)
#genes.x <- c(verhaak_all, phillips_mes, phillips_pn)
#genes.x <- c(phillips_mes, phillips_pn)
#genes.x <- c ("FN1", "SERPINE1", "CHI3L1", "CD44", "TIMP1", "OLIG2", "MYB", "CNTN1", "NCAM1", "COL1A2")
genes.x <- c("CHI3L1", "SERPINE1", "TIMP1", "OLIG2", "MYB", "CNTN1", "DLL3")
#genes.x <- c("OSMR", "LOC151300", "EPHB1", "TIMP4", "BMP2", "GPR27", "NTN4")
#genes.x <- genes1
survival.mat <- subtype %>% dplyr::select(sample, `Overall Survival (Months)`) %>% filter(`Overall Survival (Months)`>1)
#run PLSR
tcga.rna <- as.data.frame(tcga.rna.data)
tcga.rna <- tcga.rna %>%
scale(center=T, scale=T) %>%
data.frame()
#tcga.rna <- tcga.rna %>% select_if(~ !any(is.na(.)))
tcga.rna <- tcga.rna %>% .[, colSums(is.na(.))==0]
tcga.rna.samples <- rownames(tcga.rna)
tcga.rna <- tcga.rna %>% rownames_to_column(var = "sample")
tcga.rna <- tcga.rna %>% semi_join(survival.mat, by = "sample") %>% arrange(sample)
