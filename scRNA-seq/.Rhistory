mapIds(org.Hs.eg.db, ., 'ENTREZID', 'SYMBOL', multiVals = "first") %>%
data.frame() %>%
rownames_to_column(var = "GeneID")
colnames(genes)[2] <- "ensemblID"
genes <- genes %>% filter(!is.na(ensemblID))
sc.data <- sc.data %>% rownames_to_column(var = "GeneID")
exp <- sc.data %>%
inner_join(genes, by = "GeneID")
exp.symbol <- exp %>% dplyr::select(-ensemblID)
exp.entrez <- exp %>% dplyr::select(-GeneID)
spls <- colnames(
exp %>% dplyr::select(-c(ensemblID, GeneID))
) %>%
data.frame(ID=.)
#HIF gene set
hif.sig <- c("IGFBP3", "EDN2", "PFKFB4", "FLT1", "TFR2", "BNIP3L", "TGFA",
"BNIP3","PGK1","EGLN1","LDHA","EGLN3","CP","TGFB3","PFKFB3",
"HK1","TFRC","EDN1","CDKN1A","CA9","ADM","HMOX1","SERPINE1",
"LOX","NDRG1","CA12","PDK1","VEGFA","ERO1L","RORA","P4HA1","MXI1",
"SLC2A1","STC2","MIF","DDIT4","ENO1","CXCR4","PLOD1","P4HA2","GAPDH","PGAM1","TMEM45A","PIM1") %>%
match(genes$GeneID) %>% genes$ensemblID[.]
## HIF signature gene expression:
hif <- match(hif.sig, exp$ensemblID) %>% na.omit() %>% exp[.,] %>% data.frame()
rownames(hif) <- NULL
hif <- column_to_rownames(hif, var = "ensemblID")
hif_scores <- hif[,-1] %>% colMeans() %>% data.frame(hif_score=., ID=colnames(hif)[-1])
all_gene_sets <- getGmt("msigdb.v7.0.entrez.gmt")
gene_sets <- all_gene_sets %>% # Load all GSEA/Broad MSigDB gene sets
.[grep("VERHAAK_GLIOBLASTOMA", names(.))] # Pull curated gene sets by their database/primary identifier
##Mesenchymal gene set
mes.sig <- geneIds(gene_sets)$VERHAAK_GLIOBLASTOMA_MESENCHYMAL
mes <- match(mes.sig, exp$ensemblID) %>% na.omit() %>% exp[.,] %>% data.frame()
rownames(mes) <- NULL
mes <- column_to_rownames(mes, var = "ensemblID")
mes_scores <- mes[,-1] %>% colMeans() %>% data.frame(mes_scores=., ID=colnames(mes)[-1])
##proneural gene set
pn.sig <- geneIds(gene_sets)$VERHAAK_GLIOBLASTOMA_PRONEURAL
pn <- match(pn.sig, exp$ensemblID) %>% na.omit() %>% exp[.,] %>% data.frame()
rownames(pn) <- NULL
pn <- column_to_rownames(pn, var = "ensemblID")
pn_scores <- pn[,-1] %>% colMeans() %>% data.frame(pn_scores=., ID=colnames(pn)[-1])
##hallmark hypoxia gene set
hall.hyp <- getGmt("msigdb.v7.0.entrez.gmt") %>% # Load all GSEA/Broad MSigDB gene sets
.[grep("HALLMARK_HYPOXIA", names(.))]
hyp.sig <- geneIds(hall.hyp)$HALLMARK_HYPOXIA
hyp <- match(hyp.sig, exp$ensemblID) %>% na.omit() %>% exp[.,] %>% data.frame()
rownames(hyp) <- NULL
hyp <- column_to_rownames(hyp, var = "ensemblID")
hyp_scores <- hyp[,-1] %>% colMeans() %>% data.frame(hyp_scores=., ID=colnames(hyp)[-1])
#hallmark TGFb gene set
hall.tgfb <- all_gene_sets %>% .[grep("HALLMARK_TGF_BETA_SIGNALING", names(.))]
tgfb.sig <- geneIds(hall.tgfb)$HALLMARK_TGF_BETA_SIGNALING
tgfb <- match(tgfb.sig, exp$ensemblID) %>% na.omit() %>% exp[.,] %>% data.frame()
rownames(tgfb) <- NULL
tgfb <- column_to_rownames(tgfb, var = "ensemblID")
tgfb_scores <- tgfb[,-1] %>% colMeans() %>% data.frame(tgfb_scores=., ID=colnames(tgfb)[-1])
#hallmark TNFa gene set
hall.tnfa <- all_gene_sets %>% .[grep("HALLMARK_TNFA_SIGNALING_VIA_NFKB", names(.))]
tnfa.sig <- geneIds(hall.tnfa)$HALLMARK_TNFA_SIGNALING_VIA_NFKB
tnfa <- match(tnfa.sig, exp$ensemblID) %>% na.omit() %>% exp[.,] %>% data.frame()
rownames(tnfa) <- NULL
tnfa <- column_to_rownames(tnfa, var = "ensemblID")
tnfa_scores <- tnfa[,-1] %>% colMeans() %>% data.frame(tnfa_scores=., ID=colnames(tnfa)[-1])
#hallmark p53 gene set
hall.p53 <- all_gene_sets %>% .[grep("HALLMARK_P53_PATHWAY", names(.))]
p53.sig <- geneIds(hall.p53)$HALLMARK_P53_PATHWAY
p53 <- match(p53.sig, exp$ensemblID) %>% na.omit() %>% exp[.,] %>% data.frame()
rownames(p53) <- NULL
p53 <- column_to_rownames(p53, var = "ensemblID")
p53_scores <- p53[,-1] %>% colMeans() %>% data.frame(p53_scores=., ID=colnames(p53)[-1])
#hallmark MYC gene set
hall.myc <- all_gene_sets %>% .[grep("HALLMARK_MYC_TARGETS_V1", names(.))]
myc.sig <- geneIds(hall.myc)$HALLMARK_MYC_TARGETS_V1
myc <- match(myc.sig, exp$ensemblID) %>% na.omit() %>% exp[.,] %>% data.frame()
rownames(myc) <- NULL
myc <- column_to_rownames(myc, var = "ensemblID")
myc_scores <- myc[,-1] %>% colMeans() %>% data.frame(myc_scores=., ID=colnames(myc)[-1])
#PID integrin gene set
pid.integrin <- all_gene_sets %>% .[grep("HALLMARK_MYC_TARGETS_V1", names(.))]
integrin.sig <- geneIds(pid.integrin)$HALLMARK_MYC_TARGETS_V1
integrin <- match(integrin.sig, exp$ensemblID) %>% na.omit() %>% exp[.,] %>% data.frame()
rownames(integrin) <- NULL
integrin <- column_to_rownames(integrin, var = "ensemblID")
integrin_scores <- integrin[,-1] %>% colMeans() %>% data.frame(integrin_scores=., ID=colnames(integrin)[-1])
#hallmark STAT3 gene set
hall.stat3 <- all_gene_sets %>% .[grep("HALLMARK_IL6_JAK_STAT3_SIGNALING", names(.))]
stat3.sig <- geneIds(hall.stat3)$HALLMARK_IL6_JAK_STAT3_SIGNALING
stat3 <- match(stat3.sig, exp$ensemblID) %>% na.omit() %>% exp[.,] %>% data.frame()
rownames(stat3) <- NULL
stat3 <- column_to_rownames(stat3, var = "ensemblID")
stat3_scores <- stat3[,-1] %>% colMeans() %>% data.frame(stat3_scores=., ID=colnames(stat3)[-1])
#annotate samples with their gene set scores:
spls <- spls %>%
#mutate(hif.score = scale(hif_scores$hif_score, center = T, scale = T)) %>%
mutate(mes.score = scale(mes_scores$mes_scores, center = T, scale = T)) %>%
mutate(pn.score = scale(pn_scores$pn_scores, center = T, scale = T)) %>%
mutate(hyp.score = scale(hyp_scores$hyp_scores, center = T, scale = T)) %>%
mutate(tgfb.score = scale(tgfb_scores$tgfb_scores, center = T, scale = T)) %>%
mutate(tnfa.score = scale(tnfa_scores$tnfa_scores, center = T, scale = T))
#  mutate(p53.score = scale(p53_scores$p53_scores, center = T, scale = T)) %>%
#  mutate(myc.score = scale(myc_scores$myc_scores, center = T, scale = T)) %>%
#  mutate(integrin.score = scale(integrin_scores$integrin_scores, center = T, scale = T)) %>%
#  mutate(stat3.score = scale(stat3_scores$stat3_scores, center = T, scale = T))
## Perform UMAP embedding:
set.seed(123) # For reproducibility
force_run = T
if(!exists("embedding")){
embedding <- readRDS("umap_embedding.rds")
}
if(force_run){
embedding <- umap::umap(exp.symbol[,-1] %>% t(),
n_neighbors = 30, min_dist = 0.01,
n_comp = 3
)
saveRDS(embedding, file = "umap_embedding.rds")
}
## Plot UMAP embedding:
embedding$layout %>%
data.frame() %>% mutate(ID = rownames(.)) %>%
full_join(spls, by="ID") %>%
pivot_longer(-c(ID,X1,X2)) %>%
ggplot(aes(X1,X2, label = ID, color = value)) +
geom_point() +
scale_color_viridis_c(option="B") +
facet_wrap(~name) +
theme_cowplot(18) + theme_cust(ticks=F,axis="both",box=T) +
labs(title="UMAP projection - all genes", x = "UMAP1", y = "UMAP2")
View(embedding)
## Perform UMAP embedding:
set.seed(123) # For reproducibility
force_run = T
if(!exists("embedding")){
embedding <- readRDS("umap_embedding.rds")
}
if(force_run){
embedding <- umap::umap(exp.symbol[,-1] %>% t(),
n_neighbors = 30, min_dist = 0.01,
n_components = 3
)
saveRDS(embedding, file = "umap_embedding.rds")
}
## Plot UMAP embedding:
embedding$layout %>%
data.frame() %>% mutate(ID = rownames(.)) %>%
full_join(spls, by="ID") %>%
pivot_longer(-c(ID,X1,X2)) %>%
ggplot(aes(X1,X2, label = ID, color = value)) +
geom_point() +
scale_color_viridis_c(option="B") +
facet_wrap(~name) +
theme_cowplot(18) + theme_cust(ticks=F,axis="both",box=T) +
labs(title="UMAP projection - all genes", x = "UMAP1", y = "UMAP2")
#comparison of my clustering to Neftel's
umap.proj <- embedding$layout %>%
data.frame() %>% mutate(ID = rownames(.))
sample.subtypes <- sc.samples.info %>% dplyr::select(MESlike1, MESlike2, OPClike, AClike, NPClike1, NPClike2) %>%
sapply(as.numeric) %>%
as.data.frame() %>%
mutate(ID = samples.mal)
umap.proj %>% left_join(sample.subtypes, by = "ID") %>%
full_join(grps.sub, by = c("ID" = "item")) %>%
na.omit() %>%
dplyr::select(-itemConsensus, -k) %>%
pivot_longer(-c(ID, X1, X2, X3, cluster)) %>%
# filter(cluster==3) %>%
ggplot(aes(X1,X2, label = ID, color = value, shape = factor(cluster))) +
geom_point() +
facet_wrap(~name)+
scale_color_viridis_c(option="C") +
theme_cowplot(18) + theme_cust(ticks=F,axis="both",box=T) +
labs(title="UMAP projection - PMT genes", x = "UMAP1", y = "UMAP2")
exp.pmt <- bind_rows(mes, pn)[,-1]
colnames(exp.pmt) <- samples.mal
n_dim <- 5
## Perform UMAP embedding:
set.seed(111) # For reproducibility
if(!exists("embedding2")){
embedding2 <- readRDS("umap_embedding2.rds")
}
##generate UMAP projection
force_run = F
if(force_run){
embedding2 <- umap::umap(exp.pmt %>% t(),
n_neighbors = 30, min_dist = 0.01,
n_components = n_dim
)
saveRDS(embedding2, file = "umap_embedding2.rds")
}
## Plot UMAP embedding:
embedding2$layout %>%
data.frame() %>% mutate(ID = rownames(.)) %>%
full_join(spls, by="ID") %>%
pivot_longer(-c(ID,X1,X2)) %>%
ggplot(aes(X1,X2, label = ID, color = value)) +
geom_point() +
scale_color_viridis_c(option="C") +
facet_wrap(~name) +
theme_cowplot(18) + theme_cust(ticks=F,axis="both",box=T) +
labs(title="UMAP projection - PMT genes", x = "UMAP1", y = "UMAP2")
umap.proj <- embedding$layout %>% t() %>% data.matrix()
force.run = T
if(force.run == T){
seed1 <- 12345
cc <- ConsensusClusterPlus(umap.proj,
maxK = n_dim,
reps = 50,
pItem = 0.8,
pFeature = 1,
clusterAlg = "pam",
distance = "euclidean",
seed = seed1)
icl <- calcICL(cc)
grps <- icl[["itemConsensus"]]
saveRDS(grps, file = "scRNA_grps.rds")
} else {
grps <- readRDS("scRNA_grps.rds")
}
numgrps <- 3
grps.sub <- grps %>%
filter(k==numgrps) %>%
group_by(item) %>%
filter(itemConsensus==max(itemConsensus))
#grps$item <- grps$item %>% sub("-", ".", .)
embedding2$layout %>%
data.frame() %>%
mutate(ID = rownames(.)) %>%
full_join(spls, by = "ID") %>%
full_join(grps.sub, by = c("ID" = "item")) %>%
ggplot(aes(x = X1, y = X2, shape = factor(cluster), color = mes.score))+
geom_point()+
scale_color_viridis(option = "B")
embedding2$layout %>%
data.frame() %>%
mutate(ID = rownames(.)) %>%
full_join(spls, by = "ID") %>%
full_join(grps.sub, by = c("ID" = "item")) %>%
ggplot(aes(x = X1, y = X2, shape = factor(cluster), color = pn.score))+
geom_point()+
scale_color_viridis(option = "B")
count(grps.sub, vars = "cluster")
numgrps <- 5
grps.sub <- grps %>%
filter(k==numgrps) %>%
group_by(item) %>%
filter(itemConsensus==max(itemConsensus))
#grps$item <- grps$item %>% sub("-", ".", .)
embedding2$layout %>%
data.frame() %>%
mutate(ID = rownames(.)) %>%
full_join(spls, by = "ID") %>%
full_join(grps.sub, by = c("ID" = "item")) %>%
ggplot(aes(x = X1, y = X2, shape = factor(cluster), color = mes.score))+
geom_point()+
scale_color_viridis(option = "B")
embedding2$layout %>%
data.frame() %>%
mutate(ID = rownames(.)) %>%
full_join(spls, by = "ID") %>%
full_join(grps.sub, by = c("ID" = "item")) %>%
ggplot(aes(x = X1, y = X2, shape = factor(cluster), color = pn.score))+
geom_point()+
scale_color_viridis(option = "B")
numgrps <- 5
grps.sub <- grps %>%
filter(k==numgrps) %>%
group_by(item) %>%
filter(itemConsensus==max(itemConsensus))
#grps$item <- grps$item %>% sub("-", ".", .)
embedding$layout %>%
data.frame() %>%
mutate(ID = rownames(.)) %>%
full_join(spls, by = "ID") %>%
full_join(grps.sub, by = c("ID" = "item")) %>%
ggplot(aes(x = X1, y = X2, shape = factor(cluster), color = mes.score))+
geom_point()+
scale_color_viridis(option = "B")
embedding$layout %>%
data.frame() %>%
mutate(ID = rownames(.)) %>%
full_join(spls, by = "ID") %>%
full_join(grps.sub, by = c("ID" = "item")) %>%
ggplot(aes(x = X1, y = X2, shape = factor(cluster), color = pn.score))+
geom_point()+
scale_color_viridis(option = "B")
#comparison of my clustering to Neftel's
umap.proj <- embedding$layout %>%
data.frame() %>% mutate(ID = rownames(.))
sample.subtypes <- sc.samples.info %>% dplyr::select(MESlike1, MESlike2, OPClike, AClike, NPClike1, NPClike2) %>%
sapply(as.numeric) %>%
as.data.frame() %>%
mutate(ID = samples.mal)
umap.proj %>% left_join(sample.subtypes, by = "ID") %>%
full_join(grps.sub, by = c("ID" = "item")) %>%
na.omit() %>%
dplyr::select(-itemConsensus, -k) %>%
pivot_longer(-c(ID, X1, X2, X3, cluster)) %>%
# filter(cluster==3) %>%
ggplot(aes(X1,X2, label = ID, color = value, shape = factor(cluster))) +
geom_point() +
facet_wrap(~name)+
scale_color_viridis_c(option="C") +
theme_cowplot(18) + theme_cust(ticks=F,axis="both",box=T) +
labs(title="UMAP projection - PMT genes", x = "UMAP1", y = "UMAP2")
ggsave("C:/Users/willh/Documents/Lab/GBMMT/PMT manuscript/scRNAseq_UMAP.png", width = 12, height = 12)
# umap.proj %>% left_join(sample.subtypes, by = "ID") %>%
#   pivot_longer(-c(ID, X1, X2, X3)) %>%
#   ggplot(aes(X1,X3, label = ID, color = value)) +
#     geom_point() +
#     facet_wrap(~name)+
#     scale_color_viridis_c(option="C") +
#     theme_cowplot(18) + theme_cust(ticks=F,axis="both",box=T) +
#     labs(title="UMAP projection - PMT genes", x = "UMAP1", y = "UMAP3")
umap.proj %>% left_join(sample.subtypes, by = "ID") %>%
full_join(grps.sub, by = c("ID" = "item")) %>%
na.omit() %>%
dplyr::select(-itemConsensus, -k) %>%
pivot_longer(-c(ID, X1, X2, X3, X4, X5, cluster)) %>%
filter(cluster==1) %>%
ggplot(aes(X1,X2, label = ID, color = value, shape = factor(cluster))) +
geom_point() +
facet_wrap(~name)+
scale_color_viridis_c(option="C") +
theme_cowplot(18) + theme_cust(ticks=F,axis="both",box=T) +
labs(title="UMAP projection - PMT genes", x = "UMAP1", y = "UMAP2")
umap.proj %>% left_join(sample.subtypes, by = "ID") %>%
full_join(grps.sub, by = c("ID" = "item")) %>%
na.omit() %>%
dplyr::select(-itemConsensus, -k) %>%
pivot_longer(-c(ID, X1, X2, X3, cluster)) %>%
# filter(cluster==3) %>%
ggplot(aes(X1,X2, label = ID, color = value, shape = factor(cluster))) +
geom_point(alpha = 0.2) +
facet_wrap(~name)+
scale_color_viridis_c(option="C") +
theme_cowplot(18) + theme_cust(ticks=F,axis="both",box=T) +
labs(title="UMAP projection - PMT genes", x = "UMAP1", y = "UMAP2")
ggsave("C:/Users/willh/Documents/Lab/GBMMT/PMT manuscript/scRNAseq_UMAP.png", width = 12, height = 12)
#comparison of my clustering to Neftel's
umap.proj <- embedding$layout %>%
data.frame() %>% mutate(ID = rownames(.))
sample.subtypes <- sc.samples.info %>% dplyr::select(MESlike1, MESlike2, OPClike, AClike, NPClike1, NPClike2) %>%
sapply(as.numeric) %>%
as.data.frame() %>%
mutate(ID = samples.mal)
umap.proj %>% left_join(sample.subtypes, by = "ID") %>%
full_join(grps.sub, by = c("ID" = "item")) %>%
na.omit() %>%
dplyr::select(-itemConsensus, -k) %>%
pivot_longer(-c(ID, X1, X2, X3, cluster)) %>%
# filter(cluster==3) %>%
ggplot(aes(X1,X2, label = ID, color = value, shape = factor(cluster))) +
geom_point(alpha = 0.5) +
facet_wrap(~name)+
scale_color_viridis_c(option="C") +
theme_cowplot(18) + theme_cust(ticks=F,axis="both",box=T) +
labs(title="UMAP projection - PMT genes", x = "UMAP1", y = "UMAP2")
ggsave("C:/Users/willh/Documents/Lab/GBMMT/PMT manuscript/scRNAseq_UMAP.png", width = 12, height = 12)
# umap.proj %>% left_join(sample.subtypes, by = "ID") %>%
#   pivot_longer(-c(ID, X1, X2, X3)) %>%
#   ggplot(aes(X1,X3, label = ID, color = value)) +
#     geom_point() +
#     facet_wrap(~name)+
#     scale_color_viridis_c(option="C") +
#     theme_cowplot(18) + theme_cust(ticks=F,axis="both",box=T) +
#     labs(title="UMAP projection - PMT genes", x = "UMAP1", y = "UMAP3")
umap.proj %>% left_join(sample.subtypes, by = "ID") %>%
full_join(grps.sub, by = c("ID" = "item")) %>%
na.omit() %>%
dplyr::select(-itemConsensus, -k) %>%
pivot_longer(-c(ID, X1, X2, X3, cluster)) %>%
filter(cluster==1) %>%
ggplot(aes(X1,X2, label = ID, color = value, shape = factor(cluster))) +
geom_point() +
facet_wrap(~name)+
scale_color_viridis_c(option="C") +
theme_cowplot(18) + theme_cust(ticks=F,axis="both",box=T) +
labs(title="UMAP projection - PMT genes", x = "UMAP1", y = "UMAP2")
View(pn)
#HIF gene set
hif.sig <- c("IGFBP3", "EDN2", "PFKFB4", "FLT1", "TFR2", "BNIP3L", "TGFA",
"BNIP3","PGK1","EGLN1","LDHA","EGLN3","CP","TGFB3","PFKFB3",
"HK1","TFRC","EDN1","CDKN1A","CA9","ADM","HMOX1","SERPINE1",
"LOX","NDRG1","CA12","PDK1","VEGFA","ERO1L","RORA","P4HA1","MXI1",
"SLC2A1","STC2","MIF","DDIT4","ENO1","CXCR4","PLOD1","P4HA2","GAPDH","PGAM1","TMEM45A","PIM1") %>%
match(genes$GeneID) %>% genes$ensemblID[.]
## HIF signature gene expression:
hif <- match(hif.sig, exp$ensemblID) %>% na.omit() %>% exp[.,] %>% data.frame()
rownames(hif) <- NULL
hif <- column_to_rownames(hif, var = "ensemblID")
hif_scores <- hif[,-1] %>% colMeans() %>% data.frame(hif_score=., ID=colnames(hif)[-1])
all_gene_sets <- getGmt("msigdb.v7.0.entrez.gmt")
gene_sets <- all_gene_sets %>% # Load all GSEA/Broad MSigDB gene sets
.[grep("VERHAAK_GLIOBLASTOMA", names(.))] # Pull curated gene sets by their database/primary identifier
##Mesenchymal gene set
mes.sig <- geneIds(gene_sets)$VERHAAK_GLIOBLASTOMA_MESENCHYMAL
mes <- match(mes.sig, exp$ensemblID) %>% na.omit() %>% exp[.,] %>% data.frame()
rownames(mes) <- NULL
mes <- column_to_rownames(mes, var = "ensemblID")
mes_scores <- mes[,-1] %>% colMeans() %>% data.frame(mes_scores=., ID=colnames(mes)[-1])
##proneural gene set
pn.sig <- geneIds(gene_sets)$VERHAAK_GLIOBLASTOMA_PRONEURAL
pn <- match(pn.sig, exp$ensemblID) %>% na.omit() %>% exp[.,] %>% data.frame()
rownames(pn) <- NULL
pn <- column_to_rownames(pn, var = "ensemblID")
pn_scores <- pn[,-1] %>% colMeans() %>% data.frame(pn_scores=., ID=colnames(pn)[-1])
##Classical gene set
cl.sig <- geneIds(gene_sets)$VERHAAK_GLIOBLASTOMA_CLASSICAL
cl <- match(cl.sig, exp$ensemblID) %>% na.omit() %>% exp[.,] %>% data.frame()
rownames(cl) <- NULL
cl <- column_to_rownames(cl, var = "ensemblID")
cl_scores <- cl[,-1] %>% colMeans() %>% data.frame(cl_scores=., ID=colnames(cl)[-1])
##hallmark hypoxia gene set
hall.hyp <- getGmt("msigdb.v7.0.entrez.gmt") %>% # Load all GSEA/Broad MSigDB gene sets
.[grep("HALLMARK_HYPOXIA", names(.))]
hyp.sig <- geneIds(hall.hyp)$HALLMARK_HYPOXIA
hyp <- match(hyp.sig, exp$ensemblID) %>% na.omit() %>% exp[.,] %>% data.frame()
rownames(hyp) <- NULL
hyp <- column_to_rownames(hyp, var = "ensemblID")
hyp_scores <- hyp[,-1] %>% colMeans() %>% data.frame(hyp_scores=., ID=colnames(hyp)[-1])
#hallmark TGFb gene set
hall.tgfb <- all_gene_sets %>% .[grep("HALLMARK_TGF_BETA_SIGNALING", names(.))]
tgfb.sig <- geneIds(hall.tgfb)$HALLMARK_TGF_BETA_SIGNALING
tgfb <- match(tgfb.sig, exp$ensemblID) %>% na.omit() %>% exp[.,] %>% data.frame()
rownames(tgfb) <- NULL
tgfb <- column_to_rownames(tgfb, var = "ensemblID")
tgfb_scores <- tgfb[,-1] %>% colMeans() %>% data.frame(tgfb_scores=., ID=colnames(tgfb)[-1])
#hallmark TNFa gene set
hall.tnfa <- all_gene_sets %>% .[grep("HALLMARK_TNFA_SIGNALING_VIA_NFKB", names(.))]
tnfa.sig <- geneIds(hall.tnfa)$HALLMARK_TNFA_SIGNALING_VIA_NFKB
tnfa <- match(tnfa.sig, exp$ensemblID) %>% na.omit() %>% exp[.,] %>% data.frame()
rownames(tnfa) <- NULL
tnfa <- column_to_rownames(tnfa, var = "ensemblID")
tnfa_scores <- tnfa[,-1] %>% colMeans() %>% data.frame(tnfa_scores=., ID=colnames(tnfa)[-1])
#hallmark p53 gene set
hall.p53 <- all_gene_sets %>% .[grep("HALLMARK_P53_PATHWAY", names(.))]
p53.sig <- geneIds(hall.p53)$HALLMARK_P53_PATHWAY
p53 <- match(p53.sig, exp$ensemblID) %>% na.omit() %>% exp[.,] %>% data.frame()
rownames(p53) <- NULL
p53 <- column_to_rownames(p53, var = "ensemblID")
p53_scores <- p53[,-1] %>% colMeans() %>% data.frame(p53_scores=., ID=colnames(p53)[-1])
#hallmark MYC gene set
hall.myc <- all_gene_sets %>% .[grep("HALLMARK_MYC_TARGETS_V1", names(.))]
myc.sig <- geneIds(hall.myc)$HALLMARK_MYC_TARGETS_V1
myc <- match(myc.sig, exp$ensemblID) %>% na.omit() %>% exp[.,] %>% data.frame()
rownames(myc) <- NULL
myc <- column_to_rownames(myc, var = "ensemblID")
myc_scores <- myc[,-1] %>% colMeans() %>% data.frame(myc_scores=., ID=colnames(myc)[-1])
#PID integrin gene set
pid.integrin <- all_gene_sets %>% .[grep("HALLMARK_MYC_TARGETS_V1", names(.))]
integrin.sig <- geneIds(pid.integrin)$HALLMARK_MYC_TARGETS_V1
integrin <- match(integrin.sig, exp$ensemblID) %>% na.omit() %>% exp[.,] %>% data.frame()
rownames(integrin) <- NULL
integrin <- column_to_rownames(integrin, var = "ensemblID")
integrin_scores <- integrin[,-1] %>% colMeans() %>% data.frame(integrin_scores=., ID=colnames(integrin)[-1])
#hallmark STAT3 gene set
hall.stat3 <- all_gene_sets %>% .[grep("HALLMARK_IL6_JAK_STAT3_SIGNALING", names(.))]
stat3.sig <- geneIds(hall.stat3)$HALLMARK_IL6_JAK_STAT3_SIGNALING
stat3 <- match(stat3.sig, exp$ensemblID) %>% na.omit() %>% exp[.,] %>% data.frame()
rownames(stat3) <- NULL
stat3 <- column_to_rownames(stat3, var = "ensemblID")
stat3_scores <- stat3[,-1] %>% colMeans() %>% data.frame(stat3_scores=., ID=colnames(stat3)[-1])
#annotate samples with their gene set scores:
spls <- spls %>%
#mutate(hif.score = scale(hif_scores$hif_score, center = T, scale = T)) %>%
mutate(mes.score = scale(mes_scores$mes_scores, center = T, scale = T)) %>%
mutate(pn.score = scale(pn_scores$pn_scores, center = T, scale = T)) %>%
mutate(hyp.score = scale(hyp_scores$hyp_scores, center = T, scale = T)) %>%
mutate(tgfb.score = scale(tgfb_scores$tgfb_scores, center = T, scale = T)) %>%
mutate(tnfa.score = scale(tnfa_scores$tnfa_scores, center = T, scale = T))
#  mutate(p53.score = scale(p53_scores$p53_scores, center = T, scale = T)) %>%
#  mutate(myc.score = scale(myc_scores$myc_scores, center = T, scale = T)) %>%
#  mutate(integrin.score = scale(integrin_scores$integrin_scores, center = T, scale = T)) %>%
#  mutate(stat3.score = scale(stat3_scores$stat3_scores, center = T, scale = T))
exp.pmt <- bind_rows(mes, pn, cl)[,-1]
View(exp.pmt)
colnames(exp.pmt) <- samples.mal
exp.pmt <- bind_rows(mes, pn, cl)[,-1]
colnames(exp.pmt) <- samples.mal
exp.pmt <- bind_rows(mes, pn, cl)[,-1]
colnames(exp.pmt) <- samples.mal
n_dim <- 5
## Perform UMAP embedding:
set.seed(111) # For reproducibility
if(!exists("embedding2")){
embedding2 <- readRDS("umap_embedding2.rds")
}
##generate UMAP projection
force_run = T
if(force_run){
embedding2 <- umap::umap(exp.pmt %>% t(),
n_neighbors = 30, min_dist = 0.01,
n_components = n_dim
)
saveRDS(embedding2, file = "umap_embedding2.rds")
}
exp.pmt <- bind_rows(mes, pn, cl)[,-1]
colnames(exp.pmt) <- samples.mal
n_dim <- 5
## Perform UMAP embedding:
set.seed(111) # For reproducibility
if(!exists("embedding2")){
embedding2 <- readRDS("umap_embedding2.rds")
}
##generate UMAP projection
force_run = T
if(force_run){
embedding2 <- umap::umap(exp.pmt %>% t(),
n_neighbors = 30, min_dist = 0.01,
n_components = n_dim
)
saveRDS(embedding2, file = "umap_embedding2.rds")
}
